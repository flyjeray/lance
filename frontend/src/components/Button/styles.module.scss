@use 'sass:map';
@use '../../constants/theme.module.scss';

$button-variants: (
  primary: (
    text-color: theme.$lightTextColor,
    background-color: theme.$primary,
    hover-color: theme.$primaryHover,
    outline: none,
    hover-outline: none,
  ),
  alternative: (
    text-color: theme.$lightTextColor,
    background-color: theme.$alternative,
    hover-color: theme.$alternativeHover,
    outline: none,
    hover-outline: none,
  ),
  primary-outlined: (
    text-color: theme.$primary,
    background-color: white,
    hover-color: white,
    outline: 1px solid theme.$primary,
    hover-outline: 1px solid theme.$primaryHover,
  ),
  alternative-outlined: (
    text-color: theme.$alternative,
    background-color: white,
    hover-color: white,
    outline: 1px solid theme.$alternative,
    hover-outline: 1px solid theme.$alternativeHover,
  ),
);

$button-widths: (
  fit: (
    width: auto,
  ),
  full: (
    width: 100%,
  ),
);

@mixin btn($color, $width) {
  $text-color: map.get(map.get($button-variants, $color), text-color);
  $background-color: map.get(
    map.get($button-variants, $color),
    background-color
  );
  $hover-color: map.get(map.get($button-variants, $color), hover-color);
  $outline: map.get(map.get($button-variants, $color), outline);
  $hover-outline: map.get(map.get($button-variants, $color), hover-outline);

  $width: map.get(map.get($button-widths, $width), width);

  background-color: $background-color;
  color: $text-color;
  border: none;
  outline: $outline;
  transition: background-color 0.15s;
  font-size: 16px;
  padding: 10px 20px;
  border-radius: 14px;
  width: $width;

  &:hover {
    cursor: pointer;
    background-color: $hover-color;
    outline: $hover-outline;
  }
}

@each $color, $color-values in $button-variants {
  @each $width, $width-values in $button-widths {
    .btn-#{$color}-#{$width} {
      @include btn($color, $width);
    }
  }
}
